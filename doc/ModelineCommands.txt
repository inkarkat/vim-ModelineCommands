*ModelineCommands.txt*  Extended modelines that allow the execution of arbitrary Vim commands.

		     MODELINE COMMANDS    by Ingo Karkat
							*ModelineCommands.vim*
description			|ModelineCommands-description|
usage				|ModelineCommands-usage|
installation			|ModelineCommands-installation|
configuration			|ModelineCommands-configuration|
integration			|ModelineCommands-integration|
limitations			|ModelineCommands-limitations|
known problems			|ModelineCommands-known-problems|
todo				|ModelineCommands-todo|
history				|ModelineCommands-history|

==============================================================================
DESCRIPTION					*ModelineCommands-description*

    [text]{white}{vimcommand:|VimCommand:}[!][white]:{commands}:[text]
    [text]{white}{vimcommand:|VimCommand:}[!][white]:{commands}:[white]{digest}[white]:[text]

[text]			any text or empty
{white}			at least one blank character (<Space> or <Tab>)
{vimcommand:|VimCommand:}the string "vimcommand:" or "VimCommand:"
[!]			optional marker for |:silent!| execution
[white]			optional white space
{commands}		Ex commands
:[white]{digest}[white]	optional hash over {command} and
			|g:ModelineCommands_Secret| concatenated together, to
			verify the integrity of {command}
:			a colon
[text]			any text or empty

Examples:
   /* vimcommand: IndentConsistencyCopOff: */ ~

HOW IT WORKS								     *

SOURCE									     *
(Original Vim tip, Stack Overflow answer, ...)

SEE ALSO								     *
(Plugins offering complementary functionality, or plugins using this library.)

RELATED WORKS								     *
(Alternatives from other authors, other approaches, references not used here.)

==============================================================================
USAGE						      *ModelineCommands-usage*
							  *:ModelineCommands*
:ModelineCommands	Description here.

EXAMPLE						    *ModelineCommands-example*

==============================================================================
INSTALLATION				       *ModelineCommands-installation*

This script is packaged as a |vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vmb.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the |:UseVimball| command. >
    vim ModelineCommands*.vmb.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES				       *ModelineCommands-dependencies*

- Requires Vim 7.0 or higher.
- Requires the |ingo-library.vim| plugin (vimscript #4433), version 1.025 or
  higher.

==============================================================================
CONFIGURATION				      *ModelineCommands-configuration*

For a permanent configuration, put the following commands into your |vimrc|:
					      *g:ModelineCommands_FilePattern*
If you want to search for modeline commands only in certain files, you can
specify |autocmd-patterns| instead of the default "*". This must be set before
the plugin is sourced: >
    let g:ModelineCommands_FilePattern = '*.h,*.c,*.cpp'
<
		*g:ModelineCommands_FirstLines* *g:ModelineCommands_LastLines*
The number of lines at the start of the buffer that are searched for modeline
commands; the default is 'modelines' >
    let g:ModelineCommands_FirstLines = 10
<
As arbitrary Vim commands can do harm to your system (with |:!| and :call
system(...), you can execute any external command!), there are two kinds of
gatekeepers:
   *b:ModelineCommands_CommandValidator* *g:ModelineCommands_CommandValidator*
Modeline commands that do not have a digest attached can be filtered based on
the command itself. You can configure a Funcref that takes the command as an
argument, and returns whether it should be allowed: >
    let g:ModelineCommands_CommandValidator = function('...')
The validator probably will attempt to match the passed command with a regexp.
Note that blacklisting is unreliable, as there are many ways that malicious
commands can be written. Better just allow certain, harmless commands, and be
strict with your regular expression.
       *b:ModelineDigests_DigestValidator* *g:ModelineDigests_DigestValidator*
Both the modeline command and the digest are passed to this validator. The
validator should re-generate the digest from the passed command and a secret,
and compare that with the passed digest.

Validation establishes a certain level of security. If it fails, the command
will be rejected. You can still configure the policy for accepted commands,
one of "no" (discarded), "ask" (query you before execution), "yes" (allow).
 *b:ModelineCommands_AcceptUnvalidated* *g:ModelineCommands_AcceptUnvalidated*
Policy for commands where no (command or digest-based) validator is configured:
    let g:ModelineCommands_AcceptUnvalidated = "ask"
     *b:ModelineCommands_AcceptValidated* *g:ModelineCommands_AcceptValidated*
Policy for commands that passed a (command or digest-based) validator: >
    let g:ModelineCommands_AcceptValidated = "yes"
<
==============================================================================
INTEGRATION					*ModelineCommands-integration*

==============================================================================
LIMITATIONS					*ModelineCommands-limitations*

KNOWN PROBLEMS				     *ModelineCommands-known-problems*

TODO						       *ModelineCommands-todo*

IDEAS						      *ModelineCommands-ideas*

==============================================================================
HISTORY						    *ModelineCommands-history*

GOAL
First published version.

0.01	13-Jul-2016
Started development.

==============================================================================
Copyright: (C) 2016 Ingo Karkat
The VIM LICENSE applies to this plugin; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
